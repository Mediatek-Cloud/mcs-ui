// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Popover With position 1`] = `
.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin-left: 300px;
}

.c0 > * {
  margin-bottom: 30px;
}

<Popoverexample__Wrapper>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Popoverexample__Wrapper-sc-5lgfkf-0",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: inline-flex;
  flex-direction: column;
  margin-left: 300px;

  > * {
    margin-bottom: 30px;
  }
",
          ],
        },
        "displayName": "Popoverexample__Wrapper",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Popoverexample__Wrapper-sc-5lgfkf-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  -6,
                  4,
                ],
                "points": Array [
                  "cl",
                  "cr",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateX": 0,
                },
                "style": Object {
                  "transform": "translateX(-6px)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  12,
                  0,
                ],
                "points": Array [
                  "cl",
                  "cr",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateX": 0,
                },
                "style": Object {
                  "transform": "translateX(-6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            RIGHT_CENTER
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  6,
                  2,
                ],
                "points": Array [
                  "cr",
                  "cl",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateX": 0,
                },
                "style": Object {
                  "transform": "translateX(6px)  rotate(180deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  -12,
                  0,
                ],
                "points": Array [
                  "cr",
                  "cl",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateX": 0,
                },
                "style": Object {
                  "transform": "translateX(6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            LEFT_CENTER
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  12,
                ],
                "points": Array [
                  "bc",
                  "tc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px) rotate(-90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  -12,
                ],
                "points": Array [
                  "bc",
                  "tc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            TOP_CENTER
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  12,
                ],
                "points": Array [
                  "bc",
                  "tc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px) rotate(-90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  -5,
                  -12,
                ],
                "points": Array [
                  "br",
                  "tr",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            TOP_RIGHT
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  12,
                ],
                "points": Array [
                  "bc",
                  "tc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px) rotate(-90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  5,
                  -12,
                ],
                "points": Array [
                  "bl",
                  "tl",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            TOP_LEFT
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  -7,
                ],
                "points": Array [
                  "tc",
                  "bc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px) rotate(90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  12,
                ],
                "points": Array [
                  "tc",
                  "bc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            BOTTOM_CENTER
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  -7,
                ],
                "points": Array [
                  "tc",
                  "bc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px) rotate(90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  -5,
                  12,
                ],
                "points": Array [
                  "tr",
                  "br",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            BOTTOM_RIGHT
          </div>
        </div>
      </Popover>
      <Popover
        content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
        position={
          Object {
            "arrow": Object {
              "alignConfig": Object {
                "offset": Array [
                  0,
                  -7,
                ],
                "points": Array [
                  "tc",
                  "bc",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "duration": 350,
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px) rotate(90deg)",
                },
              },
            },
            "card": Object {
              "alignConfig": Object {
                "offset": Array [
                  5,
                  12,
                ],
                "points": Array [
                  "tl",
                  "bl",
                ],
              },
              "transitionConfig": Object {
                "animation": Object {
                  "ease": "easeOutQuart",
                  "translateY": 0,
                },
                "style": Object {
                  "transform": "translateY(-6px)",
                },
              },
            },
          }
        }
      >
        <div
          onClick={[Function]}
          onKeyPress={[Function]}
          role="button"
          style={
            Object {
              "display": "inline-block",
            }
          }
          tabIndex="0"
        >
          <div
            style={
              Object {
                "backgroundColor": "skyblue",
              }
            }
          >
            BOTTOM_LEFT
          </div>
        </div>
      </Popover>
    </div>
  </StyledComponent>
</Popoverexample__Wrapper>
`;

exports[`Storyshots Popover default 1`] = `
<Popover
  content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
  position={
    Object {
      "arrow": Object {
        "alignConfig": Object {
          "offset": Array [
            -6,
            4,
          ],
          "points": Array [
            "cl",
            "cr",
          ],
        },
        "transitionConfig": Object {
          "animation": Object {
            "duration": 350,
            "ease": "easeOutQuart",
            "translateX": 0,
          },
          "style": Object {
            "transform": "translateX(-6px)",
          },
        },
      },
      "card": Object {
        "alignConfig": Object {
          "offset": Array [
            12,
            0,
          ],
          "points": Array [
            "cl",
            "cr",
          ],
        },
        "transitionConfig": Object {
          "animation": Object {
            "ease": "easeOutQuart",
            "translateX": 0,
          },
          "style": Object {
            "transform": "translateX(-6px)",
          },
        },
      },
    }
  }
>
  <div
    onClick={[Function]}
    onKeyPress={[Function]}
    role="button"
    style={
      Object {
        "display": "inline-block",
      }
    }
    tabIndex="0"
  >
    <div>
      Click me
    </div>
  </div>
</Popover>
`;

exports[`Storyshots Popover in dialog 1`] = `
.c0 {
  width: 100%;
  border-radius: 3px;
  background-color: #FFFFFF;
  max-width: 446px;
  margin: auto;
}

.c0 > header {
  background-color: #FAFAFA;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.05);
  border-radius: 3px;
  height: 50px;
}

.c0 > main,
.c0 > footer {
  padding: 20px;
}

.c0 > header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding-left: 20px;
}

.c0 > footer {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c0 > footer > * + * {
  margin-left: 10px;
}

.c3 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c3:hover {
  background-color: rgb(0,151,208);
}

.c3:active {
  background-color: rgb(0,144,198);
}

.c2 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #FAFAFA;
  color: #999A94;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(202,202,202);
}

.c2:hover {
  background-color: rgb(234,234,234);
}

.c2:active {
  background-color: rgb(223,223,223);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  text-align: center;
}

.c1 > svg {
  margin-bottom: 20px;
  width: 50px;
  height: 45px;
}

<ConfirmDialog
  cancel="Cancel"
  ok="Ok"
  onHide={[Function]}
  onSubmit={[Function]}
  show={true}
  title="Attention!"
>
  <withState(PureConfirmDialog)
    cancel="Cancel"
    ok="Ok"
    onHide={[Function]}
    onSubmit={[Function]}
    show={true}
    title="Attention!"
  >
    <PureConfirmDialog
      cancel="Cancel"
      isSubmitting={false}
      ok="Ok"
      onHide={[Function]}
      onSubmit={[Function]}
      setSubmitting={[Function]}
      show={true}
      title="Attention!"
    >
      <Dialog
        backdropTransition={
          Object {
            "animation": Object {
              "delay": 0,
              "duration": 200,
              "ease": "easeOutCubic",
              "opacity": 1,
            },
            "style": Object {
              "opacity": 0.3,
            },
          }
        }
        containerTransition={
          Object {
            "animation": Object {
              "delay": 0,
              "duration": 200,
              "ease": "easeOutQuart",
              "translateY": 0,
            },
            "style": Object {
              "transform": "translateY(-20px)",
            },
          }
        }
        onOutsideClick={[Function]}
        show={true}
      >
        <Portal>
          <Portal
            containerInfo={
              <div>
                <mock-tweenone
                  animation="[object Object]"
                  style="opacity: 0.3;"
                />
              </div>
            }
          >
            <mock-TweenOne
              animation={
                Object {
                  "delay": 0,
                  "duration": 200,
                  "ease": "easeOutCubic",
                  "opacity": 1,
                }
              }
              component={[Function]}
              style={
                Object {
                  "opacity": 0.3,
                }
              }
            />
          </Portal>
        </Portal>
        <Portal>
          <Portal
            containerInfo={
              .c0 {
  width: 100%;
  border-radius: 3px;
  background-color: #FFFFFF;
  max-width: 446px;
  margin: auto;
}

.c0 > header {
  background-color: #FAFAFA;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.05);
  border-radius: 3px;
  height: 50px;
}

.c0 > main,
.c0 > footer {
  padding: 20px;
}

.c0 > header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding-left: 20px;
}

.c0 > footer {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c0 > footer > * + * {
  margin-left: 10px;
}

.c3 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #00A1DE;
  color: #FFFFFF;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(0,130,179);
}

.c3:hover {
  background-color: rgb(0,151,208);
}

.c3:active {
  background-color: rgb(0,144,198);
}

.c2 {
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  -webkit-transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  transition: background-color cubic-bezier(0.47,0,0.75,0.72) 0.3s;
  line-height: 0;
  cursor: pointer;
  background-color: #FAFAFA;
  color: #999A94;
  border-radius: 3px;
  width: initial;
  min-width: 80px;
  height: 32px;
  padding: 6px 15px;
  font-size: 1rem;
  border-color: rgb(202,202,202);
}

.c2:hover {
  background-color: rgb(234,234,234);
}

.c2:active {
  background-color: rgb(223,223,223);
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  text-align: center;
}

.c1 > svg {
  margin-bottom: 20px;
  width: 50px;
  height: 45px;
}

<div>
                <div
                  style="position: fixed; top: 0px; bottom: 0px; left: 0px; right: 0px; display: flex; align-items: center; flex-direction: column; overflow: auto;"
                >
                  <mock-tweenone
                    animation="[object Object]"
                    component="false"
                    style="transform: translateY(-20px);"
                  >
                    <div
                      class="c0"
                      width="446"
                    >
                      <header>
                        Attention!
                      </header>
                      <main>
                        <div
                          class="c1"
                        >
                          <svg
                            height="45"
                            viewBox="0 0 50 45"
                            width="50"
                          >
                            <g
                              fill="none"
                              fill-rule="evenodd"
                            >
                              <path
                                d="M0-2h50v50H0z"
                                opacity="0.1"
                              />
                              <path
                                d="M1.576 39.986C.5 41.85 1.192 43.05 3.346 43.05h43.308c2.152 0 2.846-1.2 1.77-3.064L26.768 2.48c-1.077-1.863-2.463-1.864-3.54 0L1.577 39.987zM22.293 1.94c1.495-2.59 3.922-2.583 5.414 0L49.36 39.444c1.496 2.59.277 4.688-2.706 4.688H3.344c-2.988 0-4.197-2.105-2.705-4.688L22.292 1.94z"
                                fill="#F39A1E"
                                fill-rule="nonzero"
                              />
                              <path
                                d="M24.232 5.05c.424-.736 1.116-.73 1.536 0L45.82 39.777c.424.735.072 1.33-.77 1.33H4.95c-.848 0-1.188-.602-.768-1.33l20.052-34.73z"
                                fill="#FDF4E7"
                                fill-opacity="0.9"
                              />
                              <path
                                d="M20 38.5c0-.276.228-.5.51-.5h8.98a.51.51 0 0 1 .51.5c0 .276-.228.5-.51.5h-8.98a.51.51 0 0 1-.51-.5z"
                                fill="#F39A1E"
                                opacity="0.5"
                              />
                              <path
                                d="M23.084 19.002A.906.906 0 0 1 24.009 18h1.98c.558 0 .972.456.926 1.002l-.832 9.996A1.106 1.106 0 0 1 25 30a1.115 1.115 0 0 1-1.084-1.002l-.832-9.996zM25 34a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"
                                fill="#F39A1E"
                              />
                            </g>
                          </svg>
                          <div>
                            <div
                              role="button"
                              style="display: inline-block;"
                              tabindex="0"
                            >
                              <div>
                                Click me
                              </div>
                            </div>
                          </div>
                        </div>
                      </main>
                      <footer>
                        <button
                          class="c2"
                          kind="default"
                        >
                          Cancel
                        </button>
                        <button
                          class="c3"
                          kind="primary"
                        >
                          Ok
                        </button>
                      </footer>
                    </div>
                  </mock-tweenone>
                </div>
              </div>
            }
          >
            <Container>
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "bottom": "0",
                    "display": "flex",
                    "flexDirection": "column",
                    "left": "0",
                    "overflow": "auto",
                    "position": "fixed",
                    "right": "0",
                    "top": "0",
                  }
                }
              >
                <ClickOutside
                  onClick={[Function]}
                >
                  <mock-TweenOne
                    animation={
                      Object {
                        "delay": 0,
                        "duration": 200,
                        "ease": "easeOutQuart",
                        "translateY": 0,
                      }
                    }
                    component={false}
                    style={
                      Object {
                        "transform": "translateY(-20px)",
                      }
                    }
                  >
                    <ResponsivePanel
                      width={446}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ResponsivePanel-xz3mbp-0",
                              "isStatic": false,
                              "lastClassName": "c0",
                              "rules": Array [
                                "
  width: 100%;
  border-radius: 3px;
  background-color: ",
                                [Function],
                                ";

  > header {
    background-color: ",
                                [Function],
                                ";
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);
    border-radius: 3px;
    height: 50px;
  }

  > main,
  > footer {
    padding: 20px;
  }
",
                                "
  max-width: ",
                                [Function],
                                "px;
  margin: auto; /* Note: center by default and top for overflow, ref: https://goo.gl/3i1sSD */

  > header {
    display: flex;
    align-items: center;
    padding-left: 20px;
  }

  > footer {
    display: flex;
    justify-content: center;

    > * + * {
      margin-left: 10px;
    }
  }
",
                              ],
                            },
                            "defaultProps": Object {
                              "width": 618,
                            },
                            "displayName": "ResponsivePanel",
                            "foldedComponentIds": Array [
                              "Panel-sc-8vfb46-0",
                            ],
                            "propTypes": Object {
                              "width": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ResponsivePanel-xz3mbp-0",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        width={446}
                      >
                        <div
                          className="c0"
                          width={446}
                        >
                          <Esc
                            onClick={[Function]}
                          >
                            <KeyHandler
                              eventName="keyup"
                              keyName="Escape"
                              onClick={[Function]}
                            />
                          </Esc>
                          <header>
                            Attention!
                          </header>
                          <main>
                            <styled-components__Content>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "styled-components__Content-sc-1028n22-0",
                                      "isStatic": true,
                                      "lastClassName": "c1",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;

  > svg {
    margin-bottom: 20px;
    width: 50px;
    height: 45px;
  }
",
                                      ],
                                    },
                                    "displayName": "styled-components__Content",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "styled-components__Content-sc-1028n22-0",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c1"
                                >
                                  <IconWarning>
                                    <svg
                                      height={45}
                                      viewBox="0 0 50 45"
                                      width={50}
                                    >
                                      <g
                                        fill="none"
                                        fillRule="evenodd"
                                      >
                                        <path
                                          d="M0-2h50v50H0z"
                                          opacity={0.1}
                                        />
                                        <path
                                          d="M1.576 39.986C.5 41.85 1.192 43.05 3.346 43.05h43.308c2.152 0 2.846-1.2 1.77-3.064L26.768 2.48c-1.077-1.863-2.463-1.864-3.54 0L1.577 39.987zM22.293 1.94c1.495-2.59 3.922-2.583 5.414 0L49.36 39.444c1.496 2.59.277 4.688-2.706 4.688H3.344c-2.988 0-4.197-2.105-2.705-4.688L22.292 1.94z"
                                          fill="#F39A1E"
                                          fillRule="nonzero"
                                        />
                                        <path
                                          d="M24.232 5.05c.424-.736 1.116-.73 1.536 0L45.82 39.777c.424.735.072 1.33-.77 1.33H4.95c-.848 0-1.188-.602-.768-1.33l20.052-34.73z"
                                          fill="#FDF4E7"
                                          fillOpacity={0.9}
                                        />
                                        <path
                                          d="M20 38.5c0-.276.228-.5.51-.5h8.98a.51.51 0 0 1 .51.5c0 .276-.228.5-.51.5h-8.98a.51.51 0 0 1-.51-.5z"
                                          fill="#F39A1E"
                                          opacity={0.5}
                                        />
                                        <path
                                          d="M23.084 19.002A.906.906 0 0 1 24.009 18h1.98c.558 0 .972.456.926 1.002l-.832 9.996A1.106 1.106 0 0 1 25 30a1.115 1.115 0 0 1-1.084-1.002l-.832-9.996zM25 34a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"
                                          fill="#F39A1E"
                                        />
                                      </g>
                                    </svg>
                                  </IconWarning>
                                  <div>
                                    <Popover
                                      content="The editable area of scene is the same as the size of image you upload or your computer screen if there is no image uploaded."
                                      position={
                                        Object {
                                          "arrow": Object {
                                            "alignConfig": Object {
                                              "offset": Array [
                                                -6,
                                                4,
                                              ],
                                              "points": Array [
                                                "cl",
                                                "cr",
                                              ],
                                            },
                                            "transitionConfig": Object {
                                              "animation": Object {
                                                "duration": 350,
                                                "ease": "easeOutQuart",
                                                "translateX": 0,
                                              },
                                              "style": Object {
                                                "transform": "translateX(-6px)",
                                              },
                                            },
                                          },
                                          "card": Object {
                                            "alignConfig": Object {
                                              "offset": Array [
                                                12,
                                                0,
                                              ],
                                              "points": Array [
                                                "cl",
                                                "cr",
                                              ],
                                            },
                                            "transitionConfig": Object {
                                              "animation": Object {
                                                "ease": "easeOutQuart",
                                                "translateX": 0,
                                              },
                                              "style": Object {
                                                "transform": "translateX(-6px)",
                                              },
                                            },
                                          },
                                        }
                                      }
                                    >
                                      <div
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "display": "inline-block",
                                          }
                                        }
                                        tabIndex="0"
                                      >
                                        <div>
                                          Click me
                                        </div>
                                      </div>
                                    </Popover>
                                  </div>
                                </div>
                              </StyledComponent>
                            </styled-components__Content>
                          </main>
                          <footer>
                            <Button
                              active={false}
                              block={false}
                              disabled={false}
                              kind="default"
                              onClick={[Function]}
                              round={false}
                              size="normal"
                              square={false}
                            >
                              <StyledComponent
                                active={false}
                                block={false}
                                disabled={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-sc-4bw22c-0",
                                      "isStatic": false,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  transition: background-color cubic-bezier(0.47, 0, 0.75, 0.72) 0.3s;
  line-height: 0;
  cursor: ",
                                        [Function],
                                        ";

  &:hover {
    background-color: ",
                                        [Function],
                                        ";
  }

  &:active {
    background-color: ",
                                        [Function],
                                        ";
  }

  background-color: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  border-radius: ",
                                        [Function],
                                        ";
  width: ",
                                        [Function],
                                        ";
  min-width: ",
                                        [Function],
                                        ";
  height: ",
                                        [Function],
                                        ";
  padding: ",
                                        [Function],
                                        ";
  font-size: ",
                                        [Function],
                                        ";
  border-color: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "defaultProps": Object {
                                      "active": false,
                                      "block": false,
                                      "disabled": false,
                                      "kind": "primary",
                                      "round": false,
                                      "size": "normal",
                                      "square": false,
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "propTypes": Object {
                                      "active": [Function],
                                      "block": [Function],
                                      "disabled": [Function],
                                      "kind": [Function],
                                      "round": [Function],
                                      "size": [Function],
                                      "square": [Function],
                                    },
                                    "render": [Function],
                                    "styledComponentId": "Button-sc-4bw22c-0",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                kind="default"
                                onClick={[Function]}
                                round={false}
                                size="normal"
                                square={false}
                              >
                                <button
                                  className="c2"
                                  disabled={false}
                                  kind="default"
                                  onClick={[Function]}
                                  size="normal"
                                >
                                  Cancel
                                </button>
                              </StyledComponent>
                            </Button>
                            <Button
                              active={false}
                              block={false}
                              disabled={false}
                              kind="primary"
                              onClick={[Function]}
                              round={false}
                              size="normal"
                              square={false}
                            >
                              <StyledComponent
                                active={false}
                                block={false}
                                disabled={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-sc-4bw22c-0",
                                      "isStatic": false,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-width: 1px;
  border-style: solid;
  outline: none;
  box-sizing: border-box;
  transition: background-color cubic-bezier(0.47, 0, 0.75, 0.72) 0.3s;
  line-height: 0;
  cursor: ",
                                        [Function],
                                        ";

  &:hover {
    background-color: ",
                                        [Function],
                                        ";
  }

  &:active {
    background-color: ",
                                        [Function],
                                        ";
  }

  background-color: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  border-radius: ",
                                        [Function],
                                        ";
  width: ",
                                        [Function],
                                        ";
  min-width: ",
                                        [Function],
                                        ";
  height: ",
                                        [Function],
                                        ";
  padding: ",
                                        [Function],
                                        ";
  font-size: ",
                                        [Function],
                                        ";
  border-color: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "defaultProps": Object {
                                      "active": false,
                                      "block": false,
                                      "disabled": false,
                                      "kind": "primary",
                                      "round": false,
                                      "size": "normal",
                                      "square": false,
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "propTypes": Object {
                                      "active": [Function],
                                      "block": [Function],
                                      "disabled": [Function],
                                      "kind": [Function],
                                      "round": [Function],
                                      "size": [Function],
                                      "square": [Function],
                                    },
                                    "render": [Function],
                                    "styledComponentId": "Button-sc-4bw22c-0",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                kind="primary"
                                onClick={[Function]}
                                round={false}
                                size="normal"
                                square={false}
                              >
                                <button
                                  className="c3"
                                  disabled={false}
                                  kind="primary"
                                  onClick={[Function]}
                                  size="normal"
                                >
                                  Ok
                                </button>
                              </StyledComponent>
                            </Button>
                          </footer>
                        </div>
                      </StyledComponent>
                    </ResponsivePanel>
                  </mock-TweenOne>
                </ClickOutside>
              </div>
            </Container>
          </Portal>
        </Portal>
      </Dialog>
    </PureConfirmDialog>
  </withState(PureConfirmDialog)>
</ConfirmDialog>
`;
